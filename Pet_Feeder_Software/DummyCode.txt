#include <Arduino.h>
#include <Wire.h>
#include <TimeLib.h>
#include "BluetoothSerial.h"
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
// Define Constants

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels
#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


//Bluetooth Settings
BluetoothSerial ESP32_Pet_Feeder;
int BT_DATA = 0;
// Connections to A4988
const int dirPin = 33;  // Direction
const int stepPin = 32; // Step

// Motor steps per rotation
const int STEPS_PER_REV = 200;

char BluetoothBuffer[50]={0}; 
int BL_bufferCounter=0;
void setup() {
   Serial.begin(19200);

   ESP32_Pet_Feeder.begin("ESP32_Control");
  


  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  display.display();
  delay(2000); // Pause for 2 seconds

  // Clear the buffer
  display.clearDisplay();
  
  // Setup the pins as Outputs
  pinMode(stepPin,OUTPUT); 
  pinMode(dirPin,OUTPUT);
}

void testdrawtriangle(void) {
  display.clearDisplay();

  for(int16_t i=0; i<max(display.width(),display.height())/2; i+=5) {
    display.drawTriangle(
      display.width()/2  , display.height()/2-i,
      display.width()/2-i, display.height()/2+i,
      display.width()/2+i, display.height()/2+i, SSD1306_WHITE);
    display.display();
    delay(1);
  }  
}

void testfilltriangle(void) {
  display.clearDisplay();

  for(int16_t i=max(display.width(),display.height())/2; i>0; i-=5) {
    // The INVERSE color is used so triangles alternate white/black
    display.fillTriangle(
      display.width()/2  , display.height()/2-i,
      display.width()/2-i, display.height()/2+i,
      display.width()/2+i, display.height()/2+i, SSD1306_INVERSE);
    display.display();
    delay(1);
  } 
}

void testdrawroundrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2-2; i+=2) {
    display.drawRoundRect(i, i, display.width()-2*i, display.height()-2*i,
      display.height()/4, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  
}

void testfillroundrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2-2; i+=2) {
    // The INVERSE color is used so round-rects alternate white/black
    display.fillRoundRect(i, i, display.width()-2*i, display.height()-2*i,
      display.height()/4, SSD1306_INVERSE);
    display.display();
    delay(1);
  }
}


void loop() {
  int flag=0;
  int transcomp=0;
  int receive=0;
   // Set motor direction clockwise
  digitalWrite(dirPin,HIGH); 
  
  while(ESP32_Pet_Feeder.available())
  {
    BT_DATA=ESP32_Pet_Feeder.read();
    Serial.print("BT_DATA:");
    Serial.println(BT_DATA);
    BluetoothBuffer[BL_bufferCounter]=BT_DATA-0x30;
    receive=BluetoothBuffer[BL_bufferCounter];
    Serial.print("bt buffer:");
    Serial.println(receive);
    BL_bufferCounter++;
    transcomp=1;
    
  }
  if(transcomp==1){
    Serial.println("transmission complete");
    transcomp=0;
  }
  
   if(BluetoothBuffer[0] == 0xFF)
    {
      display.clearDisplay();
      testdrawtriangle();
      testfilltriangle();
      delayMicroseconds(100); 
      flag=1;
    }
    
    if(flag == 1)
    {
       
       Serial.println("done");
    }
  BL_bufferCounter=0;
}
